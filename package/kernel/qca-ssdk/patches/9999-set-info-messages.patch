--- a/src/init/ssdk_init.c
+++ b/src/init/ssdk_init.c
@@ -3825,18 +3825,22 @@ static int ssdk_alloc_priv(a_uint32_t de
 	if (qca_phy_priv_global == NULL) {
 		return -ENOMEM;
 	}
+	SSDK_INFO("kzalloc dev_num %d ok\n", dev_num);
 
 	for (dev_id = 0; dev_id < dev_num; dev_id++) {
 		qca_phy_priv_global[dev_id] = kzalloc(sizeof(struct qca_phy_priv), GFP_KERNEL);
 		if (qca_phy_priv_global[dev_id] == NULL) {
 			return -ENOMEM;
 		}
+		SSDK_INFO("kzalloc dev_id %d ok\n", dev_id);
 /*qca808x_end*/
 		qca_phy_priv_global[dev_id]->qca_ssdk_sw_dev_registered = A_FALSE;
 		qca_phy_priv_global[dev_id]->ess_switch_flag = A_FALSE;
 /*qca808x_start*/
 		qca_ssdk_port_bmp_init(dev_id);
+		SSDK_INFO("qca_ssdk_port_bmp_init() dev_id %d ok\n", dev_id);
 		qca_ssdk_phy_info_init(dev_id);
+		SSDK_INFO("qca_ssdk_phy_info_init() dev_id %d ok\n", dev_id);
 	}
 
 	return rev;
@@ -3864,6 +3868,7 @@ static void qca_ar8327_gpio_reset(struct
 	if(!np)
 		return;
 	gpio_num = of_get_named_gpio(np, "reset_gpio", 0);
+	SSDK_INFO("1. reset_gpio %d\n", gpio_num);
 	if(gpio_num < 0)
 	{
 		reset_gpio = of_get_property(np, "reset_gpio", &len);
@@ -3885,9 +3890,12 @@ static void qca_ar8327_gpio_reset(struct
 		SSDK_ERROR("gpio%d request failed, ret:%d\n", gpio_num, ret);
 		return;
 	}
+	SSDK_INFO("2. reset_gpio %d requested\n", gpio_num);
 	gpio_direction_output(gpio_num, SSDK_GPIO_RESET);
+	SSDK_INFO("3. reset_gpio %d direction output called\n", gpio_num);
 	msleep(200);
 	gpio_set_value(gpio_num, SSDK_GPIO_RELEASE);
+	SSDK_INFO("4. reset_gpio %d value set\n", gpio_num);
 	msleep(10);
 	SSDK_INFO("GPIO%d reset switch done\n", gpio_num);
 
@@ -3909,11 +3917,13 @@ static int __init regi_init(void)
 	ssdk_switch_device_num_init();
 
 	dev_num = ssdk_switch_device_num_get();
+	SSDK_INFO("dev_num: %d\n", dev_num);
 /*qca808x_start*/
 	rv = ssdk_alloc_priv(dev_num);
 	if (rv)
 		goto out;
 
+	SSDK_INFO("ssdk_alloc_priv() %d completed\n", dev_num);
 	for (num = 0; num < dev_num; num++) {
 		ssdk_cfg_default_init(&cfg);
 /*qca808x_end*/
@@ -3949,15 +3959,18 @@ static int __init regi_init(void)
 		SW_CNTU_ON_ERROR_AND_COND1_OR_GOTO_OUT(rv, -ENODEV);
 /*qca808x_end*/
 
-
 		switch (cfg.chip_type)
 		{
 			case CHIP_ISIS:
 			case CHIP_ISISC:
 #if defined (ISISC) || defined (ISIS)
+				SSDK_INFO("start here\n");
 				if (qca_phy_priv_global[dev_id]->ess_switch_flag == A_TRUE) {
+					SSDK_INFO("got here\n");
 					qca_ar8327_gpio_reset(qca_phy_priv_global[dev_id]);
+					SSDK_INFO("and here\n");
 					rv = ssdk_switch_register(dev_id, cfg.chip_type);
+					SSDK_INFO("registered switch\n");
 					SW_CNTU_ON_ERROR_AND_COND1_OR_GOTO_OUT(rv, -ENODEV);
 					rv = qca_ar8327_hw_init(qca_phy_priv_global[dev_id]);
 					SSDK_INFO("Initializing ISISC Done!!\n");
