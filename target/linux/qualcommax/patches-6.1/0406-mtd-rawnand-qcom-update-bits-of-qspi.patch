--- a/drivers/mtd/nand/raw/qcom_nandc.c
+++ b/drivers/mtd/nand/raw/qcom_nandc.c
@@ -1457,7 +1457,7 @@ static int read_id(struct qcom_nand_host
 		nandc->buf_count = 2;
 	}
 
-	nandc_set_reg(nandc, NAND_FLASH_CMD, cmd);
+	nandc_set_reg(chip, NAND_FLASH_CMD, cmd);
 	nandc_set_reg(chip, NAND_ADDR0, column);
 	nandc_set_reg(chip, NAND_ADDR1, 0);
 	nandc_set_reg(chip, NAND_FLASH_CHIP_SELECT,
@@ -2782,7 +2782,7 @@ static int qcom_nand_attach_chip(struct
 	 * Read the required ecc strength from NAND device and overwrite the
 	 * device tree ecc strength
 	 */
-	if (chip->base.eccreq.strength >= 8)
+	if (chip->base.ecc.requirements.strength >= 8)
 		ecc->strength = 8;
 
 	/* Read QPIC version register */
@@ -3145,33 +3145,19 @@ static int qcom_nandc_setup(struct qcom_
 	return 0;
 }
 
-static void qspi_write_reg_bam(struct qcom_nand_controller *nandc,
-		unsigned int val, unsigned int reg)
-{
-	int ret;
-
-	clear_bam_transaction(nandc);
-	nandc_set_reg(chip, reg, val);
-	write_reg_dma(nandc, reg, 1, NAND_BAM_NEXT_SGL);
-
-	ret = submit_descs(nandc);
-	if (ret)
-		dev_err(nandc->dev, "Error in submitting descriptor to write config reg\n");
-	free_descs(nandc);
-}
-
 static void qspi_nand_init(struct qcom_nand_controller *nandc)
 {
 	u32 spi_cfg_val = 0x0;
 	u32 reg = 0x0;
 
-	spi_cfg_val |= (LOAD_CLK_CNTR_INIT_EN | CLK_CNTR_INIT_VAL_VEC
-			| FEA_STATUS_DEV_ADDR | SPI_CFG);
+	spi_cfg_val |= (LOAD_CLK_CNTR_INIT_EN | (CLK_CNTR_INIT_VAL_VEC << 16)
+			| (FEA_STATUS_DEV_ADDR << 8) | SPI_CFG);
 
-	qspi_write_reg_bam(nandc, 0x0, NAND_FLASH_SPI_CFG);
-	qspi_write_reg_bam(nandc, spi_cfg_val, NAND_FLASH_SPI_CFG);
+	reg = dev_cmd_reg_addr(nandc, NAND_FLASH_SPI_CFG);
+	nandc_write(nandc, reg, 0);
+	nandc_write(nandc, reg, spi_cfg_val);
 	spi_cfg_val &= ~LOAD_CLK_CNTR_INIT_EN;
-	qspi_write_reg_bam(nandc, spi_cfg_val, NAND_FLASH_SPI_CFG);
+	nandc_write(nandc, reg, spi_cfg_val);
 
 	reg = dev_cmd_reg_addr(nandc, NAND_DEV_CMD0);
 	nandc_write(nandc, reg, CMD0_VAL);
@@ -3182,8 +3168,9 @@ static void qspi_nand_init(struct qcom_n
 	reg = dev_cmd_reg_addr(nandc, NAND_DEV_CMD3);
 	nandc_write(nandc, reg, CMD3_VAL);
 
-	qspi_write_reg_bam(nandc, SPI_NUM_ADDR, NAND_SPI_NUM_ADDR_CYCLES);
-	qspi_write_reg_bam(nandc, WAIT_CNT, NAND_SPI_BUSY_CHECK_WAIT_CNT);
+	reg = dev_cmd_reg_addr(nandc, NAND_SPI_NUM_ADDR_CYCLES);
+	nandc_write(nandc, reg, SPI_NUM_ADDR);
+	nandc_write(nandc, reg + 4, WAIT_CNT);
 }
 
 static const char * const probes[] = { "cmdlinepart", "ofpart", "qcomsmem", NULL };
